# Copyright 2014-present Facebook. All Rights Reserved.
DEVMEM=/sbin/devmem

devmem_set_bit() {
    local addr
    local val
    addr=$1
    val=$($DEVMEM $addr)
    val=$((val | (0x1 << $2)))
    $DEVMEM $addr 32 $val
}

devmem_clear_bit() {
    local addr
    local val
    addr=$1
    val=$($DEVMEM $addr)
    val=$((val & ~(0x1 << $2)))
    $DEVMEM $addr 32 $val
}

scu_addr() {
    echo $((0x1E6E2000 + 0x$1))
}

GPIODIR="/sys/class/gpio"
GPIOEXPORT="$GPIODIR/export"

gpio_dir() {
    echo "$GPIODIR/gpio$1"
}

gpio_name2value() {
    local first remaining base val
    remaining=$1
    val=0
    while [ -n "$remaining" ]; do
        first=${remaining:0:1}
        case "$first" in
            [[:lower:]])
                base=$(printf "%d" "'$first'")
                base=$((base - 96))
                val=$((val * 26 + base))
                ;;
            [[:upper:]])
                base=$(printf "%d" "'$first'")
                base=$((base - 64))
                val=$((val * 26 + base))
                ;;
            *)
                if [ $val -gt 0 ]; then
                    val=$((val-1))
                fi
                val=$((val * 8 + $remaining))
                break
                ;;
        esac
        remaining=${remaining:1}
    done
    echo "$val"
}

gpio_export() {
    local gpio
    gpio=$(gpio_name2value $1)
    dir=$(gpio_dir $gpio)
    if [ ! -d ${dir} ]; then
        echo $gpio > $GPIOEXPORT
    fi
}

gpio_export_out() {
    local gpio
    gpio=$(gpio_name2value $1)
    dir=$(gpio_dir $gpio)
    if [ ! -d ${dir} ]; then
        echo $gpio > $GPIOEXPORT
        echo out > ${dir}/direction
    fi
}

gpio_set() {
    local gpio
    local val
    gpio=$(gpio_name2value $1)
    val=$2
    dir=$(gpio_dir $gpio)
    if [ ! -d ${dir} ]; then
        echo $gpio > $GPIOEXPORT
    fi

    if [ $val == 1 ]; then
      echo high > ${dir}/direction
    else
      echo low > ${dir}/direction
    fi
}

gpio_get() {
    local gpio
    local val
    gpio=$(gpio_name2value $1)
    dir=$(gpio_dir $gpio)
    if [ ! -d ${dir} ]; then
        echo $gpio > $GPIOEXPORT
    fi
    echo in > ${dir}/direction
    cat ${dir}/value
}

# Check to see if BMC power-on-reset
is_bmc_por() {
    local val
    # Read the Watch Dog Flag
    val=$(devmem 0x1e6e203c 2>/dev/null)
    if [ "$((val & 0x6))" == "0" ]; then
        # Power ON Reset
        echo 1
    else
        echo 0
    fi
}

# server is present in given slot or not
is_server_prsnt() {
    echo 1
}
# Check to see if Bridge-IC is ready in given slot or not
is_bic_ready() {
    echo 1
}

yellowsub_is_server_on() {
        echo 1
}

reset_cpu() {
    local channel
    #I2C Mux channel for CPU0-3
    if [ "$1" == "slot1" ]; then
        channel=1
    elif [ "$1" == "slot2" ]; then
        channel=2
    elif [ "$1" == "slot3" ]; then
        channel=4
    elif [ "$1" == "slot4" ]; then
        channel=8
    else
        echo "Usage:  slot1 | slot2 | slot3 | slot4"
        exit -1
    fi

    # reset CPU
    echo "Resettinng CPU $1"
    i2cset -f -y 9 0x77 $channel  # open SoC CPLD I2C
    i2cset -f -y 9 0x31 0x31 0x10  # making sys reset low by writing to CPLD register 0x31
    usleep 500000
    i2cset -f -y 9 0x31 0x31 0x11 # making sys reset high by writing to CPLD register 0x31
}
