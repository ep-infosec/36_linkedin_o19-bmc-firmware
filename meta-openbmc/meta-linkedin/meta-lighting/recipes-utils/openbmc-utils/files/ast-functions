# Copyright 2014-present Facebook. All Rights Reserved.
DEVMEM=/sbin/devmem

i2c_device_add() {
    local bus
    local addr
    local device
    bus=$"$1"
    addr="$2"
    device="$3"
    echo ${device} ${addr} > /sys/class/i2c-dev/i2c-${bus}/device/new_device
}

i2c_device_delete() {
    local bus
    local addr
    bus=$"$1"
    addr="$2"
    echo ${addr} > /sys/class/i2c-dev/i2c-${bus}/device/delete_device
}

devmem_set_bit() {
    local addr
    local val
    addr=$1
    val=$($DEVMEM $addr)
    val=$((val | (0x1 << $2)))
    $DEVMEM $addr 32 $val
}

devmem_clear_bit() {
    local addr
    local val
    addr=$1
    val=$($DEVMEM $addr)
    val=$((val & ~(0x1 << $2)))
    $DEVMEM $addr 32 $val
}

scu_addr() {
    echo $((0x1E6E2000 + 0x$1))
}

GPIODIR="/sys/class/gpio"
GPIOEXPORT="$GPIODIR/export"

gpio_dir() {
    echo "$GPIODIR/gpio$1"
}

gpio_name2value() {
    local first remaining base val
    remaining=$1
    val=0
    while [ -n "$remaining" ]; do
        first=${remaining:0:1}
        case "$first" in
            [[:lower:]])
                base=$(printf "%d" "'$first'")
                base=$((base - 96))
                val=$((val * 26 + base))
                ;;
            [[:upper:]])
                base=$(printf "%d" "'$first'")
                base=$((base - 64))
                val=$((val * 26 + base))
                ;;
            *)
                if [ $val -gt 0 ]; then
                    val=$((val-1))
                fi
                val=$((val * 8 + $remaining))
                break
                ;;
        esac
        remaining=${remaining:1}
    done
    echo "$val"
}

gpio_export() {
    local gpio
    gpio=$(gpio_name2value $1)
    dir=$(gpio_dir $gpio)
    if [ ! -d ${dir} ]; then
        echo $gpio > $GPIOEXPORT
    fi
}

gpio_export_out() {
    local gpio
    gpio=$(gpio_name2value $1)
    dir=$(gpio_dir $gpio)
    if [ ! -d ${dir} ]; then
        echo $gpio > $GPIOEXPORT
        echo out > ${dir}/direction
    fi
}

gpio_set() {
    local gpio
    local val
    gpio=$(gpio_name2value $1)
    val=$2
    dir=$(gpio_dir $gpio)
    if [ ! -d ${dir} ]; then
        echo $gpio > $GPIOEXPORT
    fi

    if [ $val == 1 ]; then
      echo high > ${dir}/direction
    else
      echo low > ${dir}/direction
    fi
}

gpio_get() {
    local gpio
    local val
    gpio=$(gpio_name2value $1)
    dir=$(gpio_dir $gpio)
    if [ ! -d ${dir} ]; then
        echo $gpio > $GPIOEXPORT
    fi
#    echo in > ${dir}/direction
    cat ${dir}/value
}

# Check to see if BMC power-on-reset
is_bmc_por() {
    local val
    # Read the Watch Dog Flag
    val=$(devmem 0x1e6e203c 2>/dev/null)
    if [ "$((val & 0x6))" == "0" ]; then
        # Power ON Reset
        echo 1
    else
        echo 0
    fi
}

# Check to see if server is present in given slot or not
is_psu_prsnt() {
  local prsnt

  case $1 in
    1)
      prsnt=$(gpio_get F1)
      ;;
    2)
      prsnt=$(gpio_get Y1)
      ;;
    3)
      prsnt=$(gpio_get F2)
      ;;
    4)
      prsnt=$(gpio_get Y2)
      ;;
    5)
      prsnt=$(gpio_get F4)
      ;;
    6)
      prsnt=$(gpio_get G5)
      ;;
    *)
      prsnt=1
      ;;
  esac

  if [ $prsnt == "0" ]; then
    echo 1
  else
    echo 0
  fi
}

# GPIOJ2(74)
devmem_clear_bit $(scu_addr 84) 10
gpio_export J2

DIR1=/sys/class/i2c-adapter

check_driver() {
    bus=$"$1"
    addr="$2"
    device="$3"
    filename="$4"

    file=${DIR1}/i2c-${bus}/${bus}-00${addr}/${filename}

    if [ ! -f $file ]; then
       dev_addr=0x${addr}
       echo  $dev_addr > /sys/bus/i2c/devices/i2c-${bus}/delete_device
       echo $device $dev_addr > /sys/class/i2c-dev/i2c-${bus}/device/new_device
    fi
}

psu_bus=(3 3 3 3 3 3)

check_psu_driver() {
    let "idx = $1 - 1"
    bus=${psu_bus[$idx]}
    dev_addr="$2"
    device="$3"
    filename="$4"
    check_driver ${bus} $dev_addr $device $filename
}

get_eFuse_bus() {
    num=$(($1))
    if [ "$num" -lt 25 ]; then
        bus=1
    else
        bus=2
    fi
    echo $bus
}

#Lighting Power Shelf
eFuse_addrs=(10 11 12 13 40 41 42 43 44 45 46 47
             14 15 16 17 50 51 52 53 54 55 56 57
             10 11 12 13 40 41 42 43 44 45 46 47
             14 15 16 17 50 51 52 53 54 55 56 57 59 5a )

get_eFuse_dir() {
    let "idx = $1 - 1"
    bus=$(get_eFuse_bus $1)
    addr=${eFuse_addrs[$idx]}

    eFuse_addr=$DIR1/i2c-$bus/$bus-00$addr
    echo $eFuse_addr
}

check_eFuse_driver() {
#    let "idx = $1 - 1"
    bus=$(get_eFuse_bus $1)
    dir=$(get_eFuse_dir $1)
    efuse_file=$dir/control/shutdown
    if [ ! -f $efuse_file ]; then
       let "idx = $1 - 1"
       addr=0x${eFuse_addrs[$idx]}
       echo  $addr > /sys/bus/i2c/devices/i2c-$bus/delete_device
       echo lm25066 $addr > /sys/class/i2c-dev/i2c-${bus}/device/new_device
    fi
}
