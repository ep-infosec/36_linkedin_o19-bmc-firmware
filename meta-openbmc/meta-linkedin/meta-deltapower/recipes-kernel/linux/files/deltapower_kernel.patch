diff --git a/arch/arm/mach-aspeed/Kconfig b/arch/arm/mach-aspeed/Kconfig
index f37d9da0baa1..1b259fddb4f3 100644
--- a/arch/arm/mach-aspeed/Kconfig
+++ b/arch/arm/mach-aspeed/Kconfig
@@ -276,6 +276,9 @@ config PWNEPTUNE
 	select EGFX_IRQ
     bool "Portwell Neptune"
 
+config DELTAPOWER
+	bool "LinkedIn Delta Power"
+
 config AST_CONSOLE_UART_BASE
     hex "Console UART base address"
     default 0x1e783000 if CMM
diff --git a/arch/arm/plat-aspeed/Makefile b/arch/arm/plat-aspeed/Makefile
index 55d9a0d6e11a..16b0f0ef027d 100644
--- a/arch/arm/plat-aspeed/Makefile
+++ b/arch/arm/plat-aspeed/Makefile
@@ -92,6 +92,11 @@ ifeq ($(CONFIG_PWNEPTUNE), y)
   PLATFB = 1
 endif
 
+ifeq ($(CONFIG_DELTAPOWER), y)
+  obj-y += dev-uart.o
+  PLATFB = 1
+endif
+
 ifeq ($(PLATFB), 1)
   obj-y += dev-spi-fb.o dev-i2c-common.o
 else
diff --git a/arch/arm/plat-aspeed/dev-spi-fb.c b/arch/arm/plat-aspeed/dev-spi-fb.c
index 307afd4d0f34..fcae9508d95b 100644
--- a/arch/arm/plat-aspeed/dev-spi-fb.c
+++ b/arch/arm/plat-aspeed/dev-spi-fb.c
@@ -60,7 +60,7 @@ static u32 ast_spi_calculate_divisor(u32 max_speed_hz)
 
 static struct ast_spi_driver_data ast_fmc_driver_data = {
 	.get_div = ast_spi_calculate_divisor,
-	.num_chipselect = AST_FMC_CS_NUM,
+    .num_chipselect = 2,
 };
 
 static struct ast_spi_driver_data ast_spi0_driver_data = {
@@ -173,7 +173,7 @@ static struct platform_device ast_fmc_device = {
 };
 
 static struct platform_device ast_spi0_device = {
-#if defined CONFIG_WEDGE100 || defined CONFIG_MINIPACK
+#if defined CONFIG_WEDGE100 || defined CONFIG_MINIPACK  || defined CONFIG_DELTAPOWER
           .name           = "ast-spi",
           .id             = 1,
 #else
@@ -234,6 +234,36 @@ static struct mtd_partition ast_legacy_partitions[] = {
 	},
 };
 
+static struct mtd_partition ast_legacy_partition1[] = {
+        {
+                .name       = "u-boot",
+                .offset     = 0,        /* From 0 */
+                .size       = 0x60000,  /* Size 384K */
+                .mask_flags = MTD_WRITEABLE,
+        }, {
+                .name       = "env",
+                .offset     = MTDPART_OFS_APPEND,  /* From 384K */
+                .size       = 0x20000,  /* Size 128K, two sectors */
+        }, {
+                .name       = "kernel",
+                .offset     = MTDPART_OFS_APPEND,  /* From 512K */
+                .size       = 0x400000, /* Size 4M */
+        }, {
+                .name       = "rootfs",
+                .offset     = MTDPART_OFS_APPEND,  /* From 4.5M */
+                .size       = 0x1780000, /* Size 23.5M */
+        }, {
+                .name       = "data1",
+                .offset     = MTDPART_OFS_APPEND,
+                .size       = MTDPART_SIZ_FULL,
+        },
+        {
+                .name       = "flash1",
+                .offset     = 0,        /* From 0 */
+                .size       = MTDPART_SIZ_FULL,  /* full size */
+        },
+};
+
 static struct mtd_partition ast_rom_partitions[] = {
 	{
 		.name       = "rom",               /* ROM (SPL), recovery U-boot */
@@ -323,6 +353,12 @@ static struct flash_platform_data ast_legacy_platform_data = {
 	.parts      = ast_legacy_partitions,
 };
 
+static struct flash_platform_data ast_legacy1_platform_data = {
+        .type       = "mx25l25635e",
+        .nr_parts   = ARRAY_SIZE(ast_legacy_partition1),
+        .parts      = ast_legacy_partition1,
+};
+
 /* The ROM platform data is FMC.0 (CS0) */
 static struct flash_platform_data ast_rom_platform_data = {
 	.type       = "mx25l25635e",
@@ -380,6 +416,14 @@ static struct spi_board_info ast_single_flash_fmc_devices[] = {
 		.bus_num    		= 0,
 		.mode 			    = SPI_MODE_0,
 	},
+    {
+        .modalias       = "m25p80",
+        .platform_data  = &ast_legacy1_platform_data,
+        .chip_select    = 1,
+        .max_speed_hz   = 50 * 1000 * 1000,
+        .bus_num        = 0,
+        .mode           = SPI_MODE_0,
+    },
 };
 
 #ifdef CONFIG_MINIPACK
@@ -392,10 +436,10 @@ static struct spi_eeprom m95m02 = {
 #endif
 
 #if defined(CONFIG_FBTP)  || defined (CONFIG_WEDGE100) || defined (CONFIG_PWNEPTUNE) || \
-    defined(CONFIG_MINIPACK)
+    defined(CONFIG_MINIPACK) || defined CONFIG_DELTAPOWER
 static struct spi_board_info ast_spi0_devices[] = {
     {
-#if defined(CONFIG_WEDGE100) || defined(CONFIG_MINIPACK)
+#if defined(CONFIG_WEDGE100) || defined(CONFIG_MINIPACK) || defined CONFIG_DELTAPOWER
         .modalias           = "spidev",
         .chip_select        = 0,
         .max_speed_hz       = 33 * 1000 * 1000,
@@ -469,7 +513,7 @@ void __init ast_add_device_spi(void)
   } else {
     spi_register_board_info(ast_single_flash_fmc_devices, ARRAY_SIZE(ast_single_flash_fmc_devices));
   }
-#if defined(CONFIG_FBTP) || defined(CONFIG_WEDGE100) || defined(CONFIG_PWNEPTUNE)
+#if defined(CONFIG_FBTP) || defined(CONFIG_WEDGE100) || defined(CONFIG_PWNEPTUNE) || defined CONFIG_DELTAPOWER
 	platform_device_register(&ast_spi0_device);
 	spi_register_board_info(ast_spi0_devices, ARRAY_SIZE(ast_spi0_devices));
 #elif defined(CONFIG_MINIPACK)
diff --git a/drivers/hwmon/pmbus/lm25066.c b/drivers/hwmon/pmbus/lm25066.c
index a26b1d1d9514..9fab77a58cc5 100644
--- a/drivers/hwmon/pmbus/lm25066.c
+++ b/drivers/hwmon/pmbus/lm25066.c
@@ -42,6 +42,11 @@ enum chips { lm25056, lm25063, lm25066, lm5064, lm5066 };
 #define LM25066_READ_AVG_IIN		0xde
 #define LM25066_READ_AVG_PIN		0xdf
 
+#define LM25066_OP_REG_ADDR     PMBUS_OPERATION
+#define LM25066_OP_SHUTDOWN_CMD 0x0
+#define LM25066_OP_POWERON_CMD  PB_OPERATION_CONTROL_ON
+#define LM25066_OP_ARG_SHUTDOWN 1
+
 #define LM25066_DEV_SETUP_CL		(1 << 4)	/* Current limit */
 
 /* LM25056 only */
@@ -99,10 +104,13 @@ static struct __coeff lm25066_coeff[5][PSC_NUM_CLASSES + 2] = {
 		},
 		[PSC_VOLTAGE_OUT] = {
 			.m = 22070,
+            .b = -1800,
 			.R = -2,
 		},
 		[PSC_CURRENT_IN] = {
 			.m = 13661,
+            .m = 9153,
+            .b = -5200,
 			.R = -2,
 		},
 		[PSC_CURRENT_IN_L] = {
@@ -110,7 +118,9 @@ static struct __coeff lm25066_coeff[5][PSC_NUM_CLASSES + 2] = {
 			.R = -2,
 		},
 		[PSC_POWER] = {
-			.m = 736,
+            /* Rs = 0.67,   m*Rs=493 */
+            .m = 493,
+            .b = -3300,
 			.R = -2,
 		},
 		[PSC_POWER_L] = {
@@ -214,6 +224,7 @@ static struct __coeff lm25066_coeff[5][PSC_NUM_CLASSES + 2] = {
 struct lm25066_data {
 	int id;
 	u16 rlimit;			/* Maximum register value */
+    int shutdown_state;
 	struct pmbus_driver_info info;
 };
 
@@ -363,6 +374,65 @@ static int lm25056_read_byte_data(struct i2c_client *client, int page, int reg)
 	return ret;
 }
 
+static int lm25066_read_byte_data(struct i2c_client *client, int page, int reg)
+{
+        int ret;
+
+        switch (reg) {
+                case PMBUS_PAGE:
+                case PMBUS_OPERATION:
+                case PMBUS_CLEAR_FAULTS:
+                case PMBUS_CAPABILITY:
+                case PMBUS_VOUT_MODE:
+                case PMBUS_FAN_CONFIG_12:
+                case PMBUS_STATUS_BYTE:
+                case PMBUS_STATUS_VOUT:
+                case PMBUS_STATUS_IOUT:
+                case PMBUS_STATUS_INPUT:
+                case PMBUS_STATUS_TEMPERATURE:
+                case PMBUS_STATUS_CML:
+                case PMBUS_STATUS_OTHER:
+                case PMBUS_STATUS_MFR_SPECIFIC:
+                case PMBUS_STATUS_FAN_12:
+                        ret = pmbus_read_byte_data(client, page, reg);
+                        return ret;
+                default:
+                        return -ENXIO;
+        }
+        return ret;
+}
+
+static int lm25066_write_byte(struct i2c_client *client, int page, u8 value)
+{
+        int ret;
+
+        switch (value) {
+                case PMBUS_PAGE:
+                case PMBUS_OPERATION:
+                case PMBUS_CLEAR_FAULTS:
+                        ret = pmbus_write_byte(client, page, value);
+                        return ret;
+                default:
+                        return -ENXIO;
+        }
+}
+
+static int lm25066_write_byte_data(struct i2c_client *client, int page, int reg,
+                                   u8 value)
+{
+        int ret;
+
+        switch (reg) {
+                case PMBUS_PAGE:
+                case PMBUS_OPERATION:
+                case PMBUS_CLEAR_FAULTS:
+                        ret = pmbus_write_byte_data(client, page, reg, value);
+                        return ret;
+                default:
+                        return -ENXIO;
+        }
+}
+
 static int lm25066_write_word_data(struct i2c_client *client, int page, int reg,
 				   u16 word)
 {
@@ -425,10 +495,160 @@ static int lm25066_write_word_data(struct i2c_client *client, int page, int reg,
 	return ret;
 }
 
+static ssize_t lm25066_curr_show(struct device *dev,
+        struct device_attribute *attr, char *buf)
+{
+        struct i2c_client *client = to_i2c_client(dev);
+        const struct pmbus_driver_info *info = pmbus_get_driver_info(client);
+        int len = 0;
+        u16 read_val = 0;
+
+        read_val = lm25066_read_word_data(client, 0, PMBUS_READ_IIN);
+
+        len = sprintf(buf, "%d\n", read_val);
+        return len;
+}
+
+static ssize_t lm25066_shutdown_show(struct device *dev,
+        struct device_attribute *attr, char *buf)
+{
+        struct i2c_client *client = to_i2c_client(dev);
+        const struct pmbus_driver_info *info = pmbus_get_driver_info(client);
+        struct lm25066_data *data = to_lm25066_data(info);
+        int len = 0;
+        u8 read_val = 0;
+
+        // Update shutdown state before printing out
+        read_val = lm25066_read_byte_data(client, 0, LM25066_OP_REG_ADDR);
+        // Only if the read was successful, update the status
+        if (data && (read_val >= 0))
+        {
+                if (read_val == LM25066_OP_SHUTDOWN_CMD)
+                        data->shutdown_state = 1;
+                else
+                        data->shutdown_state = 0;
+
+                len = sprintf(buf, "%d\n\nSet to 1 for shutdown LM25066\n",
+                              data->shutdown_state);
+        }
+
+  return len;
+}
+
+static int lm25066_shutdown_store(struct device *dev,
+        struct device_attribute *attr, const char *buf, size_t count)
+{
+        struct i2c_client *client = to_i2c_client(dev);
+        const struct pmbus_driver_info *info;
+        struct lm25066_data *data;
+
+         if (client == NULL) {
+             return -ENXIO;
+        }
+
+        info = pmbus_get_driver_info(client);
+        data = to_lm25066_data(info);
+
+        u8 write_value = 0;
+        long shutdown = 0;
+        int rc = 0;
+
+        if (buf == NULL) {
+                return -ENXIO;
+        }
+
+        rc = kstrtol(buf, 10, &shutdown);
+        if (rc != 0)    {
+                // Parsing was not successful. But will return as "count" bytes processed
+                // without doing anything, in order to give the control back to
+                // the caller / shell
+                return count;
+        }
+        // We will shutdown LM25066 only if the user input is exactly "1"
+        if (shutdown == (long)LM25066_OP_ARG_SHUTDOWN) {
+                write_value = LM25066_OP_SHUTDOWN_CMD;
+        } else {
+                write_value = LM25066_OP_POWERON_CMD;
+        }
+
+        rc = lm25066_write_byte_data(client, 0,
+                                     LM25066_OP_REG_ADDR, write_value);
+
+  // Write successful. Update driver state
+        if (data && (rc == 0)) {
+                if (write_value == LM25066_OP_SHUTDOWN_CMD)
+                        data->shutdown_state = 1;
+                else
+                        data->shutdown_state = 0;
+        }
+
+        // No matter successful or failure, we processed all input characters
+        // So, return the number of input chars processed to finish the sysfs
+        // access.
+        return count;
+}
+
+static DEVICE_ATTR(shutdown, S_IRUGO | S_IWUSR,
+                   lm25066_shutdown_show,
+                   lm25066_shutdown_store);
+
+static struct attribute *shutdown_attrs[] = {
+                                              &dev_attr_shutdown.attr,
+                                              NULL
+                                            };
+static struct attribute_group control_attr_group = {
+                                                     .name = "control",
+                                                     .attrs = shutdown_attrs,
+                                                   };
+
+static int lm25066_register_shutdown(struct i2c_client *client,
+                                     const struct i2c_device_id *id)
+{
+  return sysfs_create_group(&client->dev.kobj,
+                                                                                                                &control_attr_group);
+}
+
+static DEVICE_ATTR(curr, S_IRUGO | S_IWUSR,
+                   lm25066_curr_show,
+                   NULL);
+
+static struct attribute *curr_attrs[] = {
+                                              &dev_attr_curr.attr,
+                                              NULL
+                                            };
+static struct attribute_group curr_attr_group = {
+                                                     .name = "curr",
+                                                     .attrs = curr_attrs,
+                                                   };
+
+static int lm25066_register_curr(struct i2c_client *client,
+                                     const struct i2c_device_id *id)
+{
+  return sysfs_create_group(&client->dev.kobj, &curr_attr_group);
+}
+
+static void lm25066_remove_shutdown(struct i2c_client *client)
+{
+        sysfs_remove_group(&client->dev.kobj,
+                                                                                 &control_attr_group);
+        return;
+}
+
+static int lm25066_remove(struct i2c_client *client)
+{
+        // First, remove sysfs stub for shutdown control
+        lm25066_remove_shutdown(client);
+        // Finally, remove what pmbus_core has added
+        return pmbus_do_remove(client);
+}
+
 static int lm25066_probe(struct i2c_client *client,
 			  const struct i2c_device_id *id)
 {
 	int config;
+    int pmbus_ret;
+    int addon_ret, addon_curr_ret;
+    int ret;
 	struct lm25066_data *data;
 	struct pmbus_driver_info *info;
 	struct __coeff *coeff;
@@ -473,6 +693,8 @@ static int lm25066_probe(struct i2c_client *client,
 	} else {
 		info->func[0] |= PMBUS_HAVE_VOUT | PMBUS_HAVE_STATUS_VOUT;
 		info->read_word_data = lm25066_read_word_data;
+        info->read_byte_data = lm25056_read_byte_data;
+        info->write_byte = lm25066_write_byte;
 		data->rlimit = 0x0fff;
 	}
 	info->write_word_data = lm25066_write_word_data;
@@ -499,7 +721,27 @@ static int lm25066_probe(struct i2c_client *client,
 		info->m[PSC_POWER] = coeff[PSC_POWER].m;
 	}
 
-	return pmbus_do_probe(client, id, info);
+	pmbus_ret = pmbus_do_probe(client, id, info);
+    // On top of this, install sysfs for shutdown control
+    addon_ret = lm25066_register_shutdown(client, id);
+    addon_curr_ret = lm25066_register_curr(client, id);
+
+    if ((pmbus_ret == 0) && (addon_ret == 0) && addon_curr_ret == 0) {
+        ret = 0;
+    } else {
+        // Something went wrong.
+        if (pmbus_ret == 0)
+        {
+            // Rollback pmbus dev register before bail out
+            pmbus_do_remove(client);
+            // Return the errorcode of shutdown addon installation
+            ret = addon_ret;
+        } else {
+            // Return the errorcode of pmbus device registration
+            ret = pmbus_ret;
+        }
+    }
+    return ret;
 }
 
 static const struct i2c_device_id lm25066_id[] = {
