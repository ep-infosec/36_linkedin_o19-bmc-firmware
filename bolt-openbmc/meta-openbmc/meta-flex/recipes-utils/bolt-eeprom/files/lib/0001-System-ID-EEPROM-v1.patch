From adb88780a96ea2f967e7fcd253060bf82b1b149a Mon Sep 17 00:00:00 2001
From: Adrian Brathwaite <adrian.brathwaite@flex.com>
Date: Sun, 17 Jun 2018 22:57:16 -0700
Subject: [PATCH] System ID EEPROM v1

---
 .../wedge_eeprom.c          | 278 +++++++++++++--------
 .../wedge_eeprom.h          | 100 +++++---
 2 files changed, 246 insertions(+), 132 deletions(-)

diff --git a/wedge_eeprom.c b/wedge_eeprom.c
index 6f3ab1b..f0f7ba1 100644
--- a/wedge_eeprom.c
+++ b/wedge_eeprom.c
@@ -22,42 +22,28 @@
 #include <errno.h>
 #include <stdio.h>
 #include <string.h>
+#include <syslog.h>
 
 #include <openbmc/log.h>
 
-#ifndef FBW_EEPROM_FILE
-#define FBW_EEPROM_FILE "/sys/class/i2c-adapter/i2c-6/6-0050/eeprom"
-#endif
+#define FLX_CRC8_WORKS
 
-#define FBW_EEPROM_VERSION0 0
-#define FBW_EEPROM_V0_SIZE 162
-#define FBW_EEPROM_VERSION1 1
-#define FBW_EEPROM_V1_SIZE 174
-#define FBW_EEPROM_VERSION2 2
-#define FBW_EEPROM_V2_SIZE 176
-
-/*
- * The eeprom size is 8K, we only use 157 bytes for v1 format.
- * Read 256 for now.
- */
-#define FBW_EEPROM_SIZE 256
-
-
-static inline uint8_t fbw_crc8(uint8_t crc, uint8_t data)
-{
-  /* donot verify crc now, always return 0 */
-  return 0;
-}
-
-static uint8_t fbw_crc8_buf(const uint8_t *buf, int len)
+static uint8_t flx_crc8(const uint8_t *buf, int len)
 {
   uint8_t crc = 0;
-  int i;
-
-  for (i = 0, crc = 0; i < len; i++) {
-    crc = fbw_crc8(crc, buf[i]);
+  uint8_t tmp;
+
+  while (len--) {
+    uint8_t extract = *buf++;
+    for (tmp = 8; tmp; tmp--) {
+      uint8_t sum = (crc ^ extract) & 0x01;
+      crc >>= 1;
+      if (sum) {
+        crc ^= 0x8c;
+      }
+      extract >>= 1;
+    }
   }
-
   return crc;
 }
 
@@ -102,13 +88,13 @@ static inline void fbw_copy_product_number(
 {
   int i;
   const uint8_t *cur = *src;
-  /* 8 letter in the format of XX-XXXXXX, 2 additional letters */
+  /* 12 chars in the format of PAXXXXXXX-XXX, 2 additional chars */
   assert(dst_len >= src_len + 2);
-  for (i = 0; i < 2; i++) {
+  for (i = 0; i < 9; i++) {
     *dst++ = *cur++;
   }
   *dst++ = '-';
-  for (i = 0; i < 6; i++) {
+  for (i = 0; i < 3; i++) {
     *dst++ = *cur++;
   }
   *dst = '\0';
@@ -120,17 +106,31 @@ static inline void fbw_copy_assembly_number(
 {
   int i;
   const uint8_t *cur = *src;
-  /* 11 letter in the format of XXX-XXXXXX-XX, 3 additional letters */
-  assert(dst_len >= src_len + 3);
-  for (i = 0; i < 3; i++) {
+  /* 12 chars in the format of PAXXXXXXX-XXX, 2 additional chars */
+  assert(dst_len >= src_len + 2);
+  for (i = 0; i < 9; i++) {
     *dst++ = *cur++;
   }
   *dst++ = '-';
-  for (i = 0; i < 6; i++) {
+  for (i = 0; i < 3; i++) {
+    *dst++ = *cur++;
+  }
+  *dst = '\0';
+  (*src) += src_len;
+}
+
+static inline void fbw_copy_facebook_pcba_part(
+    char *dst, int dst_len, const uint8_t **src, int src_len)
+{
+  int i;
+  const uint8_t *cur = *src;
+  /* 12 chars in the format of PBXXXXXXX-XXX, 2 additional chars */
+  assert(dst_len >= src_len + 2);
+  for (i = 0; i < 9; i++) {
     *dst++ = *cur++;
   }
   *dst++ = '-';
-  for (i = 0; i < 2; i++) {
+  for (i = 0; i < 3; i++) {
     *dst++ = *cur++;
   }
   *dst = '\0';
@@ -142,13 +142,13 @@ static inline void fbw_copy_facebook_pcb_part(
 {
   int i;
   const uint8_t *cur = *src;
-  /* 11 letter in the format of XXX-XXXXXX-XX, 3 additional letters */
+  /* 11 chars in the format of PAXX-XXXXX-XX, 3 additional chars */
   assert(dst_len >= src_len + 3);
-  for (i = 0; i < 3; i++) {
+  for (i = 0; i < 4; i++) {
     *dst++ = *cur++;
   }
   *dst++ = '-';
-  for (i = 0; i < 6; i++) {
+  for (i = 0; i < 5; i++) {
     *dst++ = *cur++;
   }
   *dst++ = '-';
@@ -159,6 +159,33 @@ static inline void fbw_copy_facebook_pcb_part(
   (*src) += src_len;
 }
 
+static inline void fbw_copy_date_v1(
+    char *dst, int dst_len, const uint8_t **src, int src_len)
+{
+  int i;
+  const uint8_t *cur = *src;
+  /* 8 chars in the format DDMMYYYY, 3 additional chars */
+  assert(dst_len >= src_len + 3);
+  
+  for (i = 0; i < 2; i++) {
+    *dst++ = *cur++;
+  }
+  *dst++ = '/';
+  
+  for (i = 0; i < 2; i++) {
+    *dst++ = *cur++;
+  }
+  *dst++ = '/';
+  
+  for (i = 0; i < 4; i++) {
+    *dst++ = *cur++;
+  }
+  
+  *dst = '\0';
+  
+  (*src) += src_len;
+}
+
 static inline void fbw_copy_date(
     char *dst, int dst_len, const uint8_t **src, int src_len)
 {
@@ -213,53 +240,91 @@ static int fbw_parse_buffer(
     const uint8_t *buf, int len, struct wedge_eeprom_st *eeprom) {
   int rc = 0;
   const uint8_t* cur = buf;
-  uint16_t magic;
+  char magic[FBW_EEPROM_F_MAGIC+1];
   int crc_len;
   uint8_t crc8;
 
   memset(eeprom, 0, sizeof(*eeprom));
 
-  /* make sure the magic number */
-  fbw_copy_uint16(&magic, &cur, FBW_EEPROM_F_MAGIC);
-  if (magic != 0xfbfb) {
+  /* Verify the magic number is "LI19" */
+  fbw_strcpy(magic, sizeof(magic), &cur, FBW_EEPROM_F_MAGIC);
+  syslog(LOG_NOTICE, "EEPROM MAGIC NUM    : %s", magic);
+
+  if (strncmp(LI_EEPROM_MAGIC_NUM, magic, FBW_EEPROM_F_MAGIC) != 0) {
+    syslog(LOG_WARNING, "Unexpected magic word %s", magic);
     rc = EFAULT;
-    LOG_ERR(rc, "Unexpected magic word 0x%x", magic);
-    goto out;
+
+    #ifdef FBW_EEPROM_BOOT_WITH_BAD_MAGIC_NUM
+      syslog(LOG_WARNING, "Booting with bad magic word");
+    #else
+      syslog(LOG_WARNING, "Parse ID EEPROM FAILED!");
+      goto out;
+    #endif
   }
 
-  /* confirm the version number, only version is supported */
-  fbw_copy_uint8(&eeprom->fbw_version, &cur, FBW_EEPROM_F_VERSION);
-  if ((eeprom->fbw_version != FBW_EEPROM_VERSION0) &&
-      (eeprom->fbw_version != FBW_EEPROM_VERSION1) &&
-      (eeprom->fbw_version != FBW_EEPROM_VERSION2)) {
-    rc = EFAULT;
-    LOG_ERR(rc, "Unsupported version number %u", eeprom->fbw_version);
-    goto out;
-  } else {
-    if (eeprom->fbw_version == FBW_EEPROM_VERSION0) {
-      crc_len = FBW_EEPROM_V0_SIZE;
-    } else if (eeprom->fbw_version == FBW_EEPROM_VERSION1) {
-      crc_len = FBW_EEPROM_V1_SIZE;
-    } else if (eeprom->fbw_version == FBW_EEPROM_VERSION2) {
+  /* Confirm the version number.*/
+  /* Version 1 is the current production version.  There are */
+  /* versions 2 and 5 from preproduction that need to be scrubbed */
+  fbw_copy_uint16(&eeprom->fbw_version, &cur, FBW_EEPROM_F_VERSION);
+  eeprom->fbw_version = ntohs(eeprom->fbw_version);
+  syslog(LOG_NOTICE, "EEPROM version      : %d", eeprom->fbw_version);
+  switch (eeprom->fbw_version) {
+    case LI_EEPROM_VERSION1:
+      crc_len = LI_EEPROM_V1_SIZE;
+      break;
+
+    case FBW_EEPROM_VERSION2:
       crc_len = FBW_EEPROM_V2_SIZE;
-    }
-    assert(crc_len <= len);
+      break;
+
+    case FBW_EEPROM_VERSION5:
+      crc_len = FBW_EEPROM_V5_SIZE;
+      break;
+
+    default:
+      // Should never reach here
+      rc = EFAULT;
+      syslog(LOG_WARNING, "%d is an UNSUPPORTED version", eeprom->fbw_version);
+      syslog(LOG_WARNING, "Parse ID EEPROM FAILED!");
+      goto out;
+      break;
+  }
+
+  assert(crc_len <= len);
+
+  if (eeprom->fbw_version != LI_EEPROM_VERSION1) {
+      syslog(LOG_WARNING,
+             "WARNING: EEPROM needs to be updated to production version 1!");
+      printf("WARNING: BMC EEPROM needs to be updated to productin version 1!");
   }
 
+// TODO: Fix CRC!!!
+// Forget about it.  Can't get the CRC to work.  Different
+//  sum gets generated each time even with the same (seeminly)
+//  contents.  That's the first problem.  The second is no
+//  matter what I calculate, I always read back a sum of zero
+//  anyway.  Will have to use the I2C programmer to take a
+//  look at what is actually being written into the EEROM 
+//  because I don't yet know if the problem is in the reading
+//  or the writing.
   /* check CRC */
-  crc8 = fbw_crc8_buf(buf, crc_len);
-  if (crc8 != 0) {
-    rc = EFAULT;
-    LOG_ERR(rc, "CRC check failed");
-    goto out;
+#ifdef FLX_CRC8_WORKS
+  crc8 = flx_crc8(buf+FBW_EEPROM_F_MAGIC, crc_len);
+  if (crc8 != FLEX_EEPROM_CRC8_CSUM) {
+    syslog(LOG_WARNING, "CRC check failed.  Expected 0x%x, got 0x%x", FLEX_EEPROM_CRC8_CSUM, crc8);
+    // XXX rc = EFAULT;
+    // XXX goto out;
   }
+#endif // FLX_CRC8_WORKS
 
   /* Product name: ASCII for 12 characters */
   fbw_strcpy(eeprom->fbw_product_name,
              sizeof(eeprom->fbw_product_name),
              &cur, FBW_EEPROM_F_PRODUCT_NAME);
 
-  /* Product Part #: 8 byte data shown as XX-XXXXXXX */
+  syslog(LOG_NOTICE, "EEPROM product name : %s", eeprom->fbw_product_name);
+
+  /* Product Part #: 12 byte data shown as PAXXXXXXX-000 */
   fbw_copy_product_number(eeprom->fbw_product_number,
                           sizeof(eeprom->fbw_product_number),
                           &cur, FBW_EEPROM_F_PRODUCT_NUMBER);
@@ -269,38 +334,40 @@ static int fbw_parse_buffer(
                            sizeof(eeprom->fbw_assembly_number),
                            &cur, FBW_EEPROM_F_ASSEMBLY_NUMBER);
 
-  /* Facebook PCBA Part Number: XXX-XXXXXXX-XX */
-  fbw_copy_facebook_pcb_part(eeprom->fbw_facebook_pcba_number,
-                             sizeof(eeprom->fbw_facebook_pcba_number),
-                             &cur, FBW_EEPROM_F_FACEBOOK_PCBA_NUMBER);
+  /* Partner PCBA Part Number: PAXX-XXXXX-XX */
+  fbw_copy_facebook_pcba_part(eeprom->fbw_facebook_pcba_number,
+                              sizeof(eeprom->fbw_facebook_pcba_number),
+                              &cur, FBW_EEPROM_F_FACEBOOK_PCBA_NUMBER);
 
-  /* Facebook PCBA Part Number: XXX-XXXXXXX-XX */
-  if (eeprom->fbw_version >= FBW_EEPROM_VERSION1) {
-    fbw_copy_facebook_pcb_part(eeprom->fbw_facebook_pcb_number,
-                               sizeof(eeprom->fbw_facebook_pcb_number),
-                               &cur, FBW_EEPROM_F_FACEBOOK_PCB_NUMBER);
-  }
+  /* Partner PCB Part Number: PBXXXXXXX-XXX */
+  fbw_copy_facebook_pcb_part(eeprom->fbw_facebook_pcb_number,
+                             sizeof(eeprom->fbw_facebook_pcb_number),
+                             &cur, FBW_EEPROM_F_FACEBOOK_PCB_NUMBER);
 
-  /* ODM PCBA Part Number: XXXXXXXXXXXX */
-  fbw_strcpy(eeprom->fbw_odm_pcba_number,
-             sizeof(eeprom->fbw_odm_pcba_number),
-             &cur, FBW_EEPROM_F_ODM_PCBA_NUMBER);
+  /* Flex PCBA Part Number: PAXX-XXXXX-XX */
+  fbw_copy_facebook_pcba_part(eeprom->fbw_odm_pcba_number,
+                              sizeof(eeprom->fbw_odm_pcba_number),
+                              &cur, FBW_EEPROM_F_ODM_PCBA_NUMBER);
 
-  /* ODM PCBA Serial Number: XXXXXXXXXXXX */
+  /* Flex PCBA Serial Number: XXXXXXXXXXXX */
   fbw_strcpy(eeprom->fbw_odm_pcba_serial,
              sizeof(eeprom->fbw_odm_pcba_serial),
-             &cur,
-             (eeprom->fbw_version >= FBW_EEPROM_VERSION2)
-             ? FBW_EEPROM_F_ODM_PCBA_SERIAL_V2
-             : FBW_EEPROM_F_ODM_PCBA_SERIAL);
+             &cur, FBW_EEPROM_F_ODM_PCBA_SERIAL);
+  syslog(LOG_NOTICE, "PCBA Serial         : %s",
+         eeprom->fbw_odm_pcba_serial);
 
   /* Product Production State */
-  fbw_copy_uint8(&eeprom->fbw_production_state,
-                 &cur, FBW_EEPROM_F_PRODUCT_STATE);
+  fbw_copy_uint16(&eeprom->fbw_production_state,
+                  &cur, FBW_EEPROM_F_PRODUCT_STATE);
+  eeprom->fbw_production_state = ntohs(eeprom->fbw_production_state);
+  syslog(LOG_NOTICE, "Production State    : %d",
+         eeprom->fbw_production_state);
 
   /* Product Version */
   fbw_copy_uint8(&eeprom->fbw_product_version,
                  &cur, FBW_EEPROM_F_PRODUCT_VERSION);
+  syslog(LOG_NOTICE, "Product Version     : %d",
+         eeprom->fbw_product_version);
 
   /* Product Sub Version */
   fbw_copy_uint8(&eeprom->fbw_product_subversion,
@@ -309,12 +376,11 @@ static int fbw_parse_buffer(
   /* Product Serial Number: XXXXXXXX */
   fbw_strcpy(eeprom->fbw_product_serial,
              sizeof(eeprom->fbw_product_serial),
-             &cur,
-             (eeprom->fbw_version >= FBW_EEPROM_VERSION2)
-             ? FBW_EEPROM_F_PRODUCT_SERIAL_V2
-             : FBW_EEPROM_F_PRODUCT_SERIAL);
+             &cur, FBW_EEPROM_F_PRODUCT_SERIAL);
+  syslog(LOG_NOTICE, "System Serial       : %s",
+         eeprom->fbw_product_serial);
 
-  /* Product Assert Tag: XXXXXXXX */
+  /* Product Asset Tag: XXXXXXXX */
   fbw_strcpy(eeprom->fbw_product_asset,
              sizeof(eeprom->fbw_product_asset),
              &cur, FBW_EEPROM_F_PRODUCT_ASSET);
@@ -324,10 +390,12 @@ static int fbw_parse_buffer(
              sizeof(eeprom->fbw_system_manufacturer),
              &cur, FBW_EEPROM_F_SYSTEM_MANUFACTURER);
 
-  /* System Manufacturing Date: mm-dd-yy */
-  fbw_copy_date(eeprom->fbw_system_manufacturing_date,
-                sizeof(eeprom->fbw_system_manufacturing_date),
-                &cur, FBW_EEPROM_F_SYSTEM_MANU_DATE);
+  /* System Manufacturing Date: mm-dd-yyyy */
+  fbw_copy_date_v1(eeprom->fbw_system_manufacturing_date,
+                   sizeof(eeprom->fbw_system_manufacturing_date),
+                   &cur, FBW_EEPROM_F_SYSTEM_MANU_DATE);
+  syslog(LOG_NOTICE, "EEPROM Mfg Date     : %s",
+         eeprom->fbw_system_manufacturing_date);
 
   /* PCB Manufacturer: XXXXXXXXX */
   fbw_strcpy(eeprom->fbw_pcb_manufacturer,
@@ -350,8 +418,9 @@ static int fbw_parse_buffer(
                &cur, FBW_EEPROM_F_EXT_MAC_BASE);
 
   /* Extended MAC Address Size */
-  fbw_copy_uint16(&eeprom->fbw_mac_size,
-                  &cur,FBW_EEPROM_F_EXT_MAC_SIZE);
+  fbw_copy_uint16(&eeprom->fbw_mac_size, &cur,FBW_EEPROM_F_EXT_MAC_SIZE);
+  eeprom->fbw_mac_size = ntohs(eeprom->fbw_mac_size);
+  syslog(LOG_NOTICE, "Extended MAC sz     : %d", eeprom->fbw_mac_size);
 
   /* Location on Fabric: "LEFT"/"RIGHT", "WEDGE", "LC" */
   fbw_strcpy(eeprom->fbw_location,
@@ -361,6 +430,7 @@ static int fbw_parse_buffer(
   /* CRC8 */
   fbw_copy_uint8(&eeprom->fbw_crc8,
                  &cur, FBW_EEPROM_F_CRC8);
+  syslog(LOG_NOTICE, "EEPROM CRC          : 0x%x", eeprom->fbw_crc8);
 
   assert((cur - buf) <= len);
 
@@ -386,7 +456,7 @@ int wedge_eeprom_parse(const char *fn, struct wedge_eeprom_st *eeprom)
   fin = fopen(fn, "r");
   if (fin == NULL) {
     rc = errno;
-    LOG_ERR(rc, "Failed to open %s", FBW_EEPROM_FILE);
+    syslog(LOG_WARNING, "Failed to open %s", FBW_EEPROM_FILE);
     goto out;
   }
 
@@ -394,14 +464,14 @@ int wedge_eeprom_parse(const char *fn, struct wedge_eeprom_st *eeprom)
   rc = fseek(fin, 0, SEEK_END);
   if (rc) {
     rc = errno;
-    LOG_ERR(rc, "Failed to seek to the end of %s", FBW_EEPROM_FILE);
+    syslog(LOG_WARNING, "Failed to seek to the end of %s", FBW_EEPROM_FILE);
     goto out;
   }
 
   len = ftell(fin);
   if (len < FBW_EEPROM_SIZE) {
     rc = ENOSPC;
-    LOG_ERR(rc, "File '%s' is too small (%u < %u)", FBW_EEPROM_FILE,
+    syslog(LOG_WARNING, "File '%s' is too small (%u < %u)", FBW_EEPROM_FILE,
             len, FBW_EEPROM_SIZE);
     goto out;
   }
@@ -411,7 +481,7 @@ int wedge_eeprom_parse(const char *fn, struct wedge_eeprom_st *eeprom)
 
   rc = fread(buf, 1, sizeof(buf), fin);
   if (rc < sizeof(buf)) {
-    LOG_ERR(ENOSPC, "Failed to complete the read. Only got %d", rc);
+    syslog(LOG_WARNING, "Failed to complete the read. Only got %d bytes", rc);
     rc = ENOSPC;
     goto out;
   }
diff --git a/wedge_eeprom.h b/wedge_eeprom.h
index d33df51..658aa25 100644
--- a/wedge_eeprom.h
+++ b/wedge_eeprom.h
@@ -24,24 +24,22 @@ extern "C" {
 
 #include <stdint.h>
 
-#define FBW_EEPROM_F_MAGIC 2
-#define FBW_EEPROM_F_VERSION 1
-#define FBW_EEPROM_F_PRODUCT_NAME 12
-#define FBW_EEPROM_F_PRODUCT_NUMBER 8
+#define FBW_EEPROM_F_MAGIC 4
+#define FBW_EEPROM_F_VERSION 2
+#define FBW_EEPROM_F_PRODUCT_NAME 16
+#define FBW_EEPROM_F_PRODUCT_NUMBER 16
 #define FBW_EEPROM_F_ASSEMBLY_NUMBER 12
-#define FBW_EEPROM_F_FACEBOOK_PCBA_NUMBER 12
-#define FBW_EEPROM_F_FACEBOOK_PCB_NUMBER 12
-#define FBW_EEPROM_F_ODM_PCBA_NUMBER 13
+#define FBW_EEPROM_F_FACEBOOK_PCBA_NUMBER 14
+#define FBW_EEPROM_F_FACEBOOK_PCB_NUMBER 14
+#define FBW_EEPROM_F_ODM_PCBA_NUMBER 14
 #define FBW_EEPROM_F_ODM_PCBA_SERIAL 12
-#define FBW_EEPROM_F_ODM_PCBA_SERIAL_V2 13
-#define FBW_EEPROM_F_PRODUCT_STATE 1
+#define FBW_EEPROM_F_PRODUCT_STATE 2
 #define FBW_EEPROM_F_PRODUCT_VERSION 1
 #define FBW_EEPROM_F_PRODUCT_SUBVERSION 1
-#define FBW_EEPROM_F_PRODUCT_SERIAL 12
-#define FBW_EEPROM_F_PRODUCT_SERIAL_V2 13
+#define FBW_EEPROM_F_PRODUCT_SERIAL 16
 #define FBW_EEPROM_F_PRODUCT_ASSET 12
 #define FBW_EEPROM_F_SYSTEM_MANUFACTURER 8
-#define FBW_EEPROM_F_SYSTEM_MANU_DATE 4
+#define FBW_EEPROM_F_SYSTEM_MANU_DATE 8
 #define FBW_EEPROM_F_PCB_MANUFACTURER 8
 #define FBW_EEPROM_F_ASSEMBLED 8
 #define FBW_EEPROM_F_LOCAL_MAC 12
@@ -50,11 +48,61 @@ extern "C" {
 #define FBW_EEPROM_F_LOCATION 8
 #define FBW_EEPROM_F_CRC8 1
 
-#define __MAX(a, b) (((a) > (b)) ? (a) : (b))
+#define FBW_EEPROM_F_SYSTEM_MANU_DATE_v2 8
+#define FBW_EEPROM_F_SYSTEM_MANU_DATE_v3 12
+#define FBW_EEPROM_F_SYSTEM_MANU_DATE_v4 14
+
+#define FBW_EEPROM_MAGIC_NUM	0xFBFB
+#define FBW_EEPROM_MAGIC_BYTE0	0xFB
+#define FBW_EEPROM_MAGIC_BYTE1	0xFB
+#define FBW_EEPROM_CRC8_CSUM	0xED
+
+#define FLEX_EEPROM_CRC8_CSUM	0
+#define FLEX_EEPROM_F_PROD_VERS 8
+#define FLEX_EEPROM_F_HW_REV    8
+#define FLEX_EEPROM_MAGIC_NUM   0xBEBE
+#define FLEX_EEPROM_MAGIC_BYTE0 0xBE
+#define FLEX_EEPROM_MAGIC_BYTE1 0xBE
+
+#define FBW_EEPROM_VERSION0 0
+#define FBW_EEPROM_V0_SIZE 162
+#define FBW_EEPROM_VERSION1 1
+#define FBW_EEPROM_V1_SIZE 174
+#define FBW_EEPROM_VERSION2 2
+#define FBW_EEPROM_V2_SIZE 196
+#define FBW_EEPROM_VERSION5 5
+#define FBW_EEPROM_V5_SIZE 202 /* sizeof (struct wedge_eeprom_gn) */
+
+/*
+ * EEPROM Version # is being reset to 1 for production
+ * This poses some problems for the pre production units
+ * that already have versions of 2 or 5.  However these
+ * should get cleared out with this release (6).
+ */
+#define LI_EEPROM_VERSION1 1
+#define LI_EEPROM_V1_SIZE  199
+
+#define LI_EEPROM_MAGIC_NUM   "LI19"
+#define LI_EEPROM_MAGIC_BYTE0 "L"
+#define LI_EEPROM_MAGIC_BYTE1 "I"
+#define LI_EEPROM_MAGIC_BYTE2 "1"
+#define LI_EEPROM_MAGIC_BYTE3 "9"
+
+/*
+ * The eeprom size is 8K, we only use 157 bytes for v1 format.
+ * Read 256 for now.
+ */
+#define FBW_EEPROM_SIZE 256
+
+#ifndef FBW_EEPROM_FILE
+#define FBW_EEPROM_FILE "/sys/class/i2c-adapter/i2c-6/6-0051/eeprom"
+#endif
+
+#define FBW_EEPROM_BOOT_WITH_BAD_MAGIC_NUM
 
 struct wedge_eeprom_st {
   /* version number of the eeprom. Must be the first element */
-  uint8_t fbw_version;
+  uint16_t fbw_version;
 
   /* Product Name */
   char fbw_product_name[FBW_EEPROM_F_PRODUCT_NAME + 1];
@@ -63,24 +111,22 @@ struct wedge_eeprom_st {
   char fbw_product_number[FBW_EEPROM_F_PRODUCT_NUMBER + 2];
 
   /* System Assembly Part Number XXX-XXXXXX-XX */
-  char fbw_assembly_number[FBW_EEPROM_F_ASSEMBLY_NUMBER + 3];
+  char fbw_assembly_number[FBW_EEPROM_F_ASSEMBLY_NUMBER + 2];
 
   /* Facebook PCBA Part Number: XXX-XXXXXXX-XX */
-  char fbw_facebook_pcba_number[FBW_EEPROM_F_FACEBOOK_PCBA_NUMBER + 3];
+  char fbw_facebook_pcba_number[FBW_EEPROM_F_FACEBOOK_PCBA_NUMBER + 2];
 
   /* Facebook PCB Part Number: XXX-XXXXXXX-XX */
   char fbw_facebook_pcb_number[FBW_EEPROM_F_FACEBOOK_PCB_NUMBER + 3];
 
-  /* ODM PCBA Part Number: XXXXXXXXXXXX */
-  char fbw_odm_pcba_number[FBW_EEPROM_F_ODM_PCBA_NUMBER + 1];
+  /* ODM PCB Part Number: XXXXXXXXXXXX */
+  char fbw_odm_pcba_number[FBW_EEPROM_F_ODM_PCBA_NUMBER + 2];
 
-  /* ODM PCBA Serial Number: XXXXXXXXXXXX */
-  char fbw_odm_pcba_serial[__MAX(FBW_EEPROM_F_ODM_PCBA_SERIAL,
-                                 FBW_EEPROM_F_ODM_PCBA_SERIAL_V2)
-                           + 1];
+  /* ODM PCB Serial Number: XXXXXXXXXXXX */
+  char fbw_odm_pcba_serial[FBW_EEPROM_F_ODM_PCBA_SERIAL + 1];
 
   /* Product Production State */
-  uint8_t fbw_production_state;
+  uint16_t fbw_production_state;
 
   /* Product Version */
   uint8_t fbw_product_version;
@@ -89,9 +135,7 @@ struct wedge_eeprom_st {
   uint8_t fbw_product_subversion;
 
   /* Product Serial Number: XXXXXXXX */
-  char fbw_product_serial[__MAX(FBW_EEPROM_F_PRODUCT_SERIAL,
-                                FBW_EEPROM_F_PRODUCT_SERIAL_V2)
-                          + 1];
+  char fbw_product_serial[FBW_EEPROM_F_PRODUCT_SERIAL + 1];
 
   /* Product Asset Tag: XXXXXXXX */
   char fbw_product_asset[FBW_EEPROM_F_PRODUCT_ASSET + 1];
@@ -99,8 +143,8 @@ struct wedge_eeprom_st {
   /* System Manufacturer: XXXXXXXX */
   char fbw_system_manufacturer[FBW_EEPROM_F_SYSTEM_MANUFACTURER + 1];
 
-  /* System Manufacturing Date: mm-dd-yy */
-  uint8_t fbw_system_manufacturing_date[10];
+  /* System Manufacturing Date: mm-dd-yyyy */
+  char fbw_system_manufacturing_date[FBW_EEPROM_F_SYSTEM_MANU_DATE + 3];
 
   /* PCB Manufacturer: XXXXXXXXX */
   char fbw_pcb_manufacturer[FBW_EEPROM_F_PCB_MANUFACTURER + 1];
-- 
2.5.0

